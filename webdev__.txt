создаем у себя локально папку под приватный репозиторий школы (у меня папка с названием "egarnaga-JS2020Q3")

переходим в эту папку в консоли и

git init

____________________________________________________

Потом находясь в той же папке:
Добавить удаленный репозиторий к себе на свой локальный комп по SSH-ключу или по ссылке (origin - так принято называть основной удаленный репозиторий):

git remote add origin git@github.com:rolling-scopes-school/egarnaga-JS2020Q3.git

____________________________________________________

Потом находясь в той же папке забрать к себе все что лежит в удаленном мастере:

git pull origin master

____________________________________________________

Находясь в мастере создаем ветку webdev и переходим в нее

git checkout -b webdev

____________________________________________________

Запушим новую ветку

git push origin webdev

____________________________________________________

Теперь в локальной папке на компе "egarnaga-JS2020Q3" создадим папку с названием webdev и положив эту папку наши файлы проекта - HTML (index.html), CSS (style.css) и папку assets с изображениями и файлами шрифтов, если есть.

____________________________________________________

Далее все стандартно пушим в ветку webdev

git status
git add .
git commit -m 'feat: add'
git push origin webdev

____________________________________________________

Далее идем на Гитхабе в приватный репозиторий школы и там открываем ПулРеквест из ветки webdev в ветку gh-pages и мерджим его

____________________________________________________

Ссылка на задеплоенную версию приложения имеет вид: https://rolling-scopes-school.github.io/repository-name/folder-name, где

repository-name - имя вашего репозитория в rs school
folder-name - имя папки с файлами проекта

____________________________________________________

После этого нужно убедится что деплой работает и сайт открывается

У меня будет такая ссылка:
https://rolling-scopes-school.github.io/egarnaga-JS2020Q3/webdev/


(деплой может появиться не сразу, а может не появиться совсем, у меня сразу появился)

____________________________________________________

Далее эту свою ссылку (https://rolling-scopes-school.github.io/egarnaga-JS2020Q3/webdev/) надо засабмитить в приложении школы в разделе кросс-чек сабмит



…or create a new repository on the command line
echo "# clean-code-s1e1" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:Nevold/clean-code-s1e1.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin git@github.com:Nevold/clean-code-s1e1.git
git branch -M main
git push -u origin main







при создании ветки для пул реквеста в маин
git commit -m "message"
git pull origin main --allow-unrelated-histories
git push origin react-game

ОСНОВНЫЕ КОМАНДЫ:
git branch {name} создать ветку
git checkout {name} перейти на ветку
git checkout -b {name} создать и перейти на ветку
git checkout {commit-его хэш сумма} переход на нужный коммит ,(HEAD(указатель коммита) detached)причем нет указателя ни на одну ветку 
git checkout -b {name}{commit} перешли на нужный коммит и снего создали ветку
git checkout {file name - ex-index.js} откат сохранений до последнего коммита, главное что бы он не был добавлен в index, например командой add .
git branch -a просмотр всех веток
git merge {branch} находясь на ветке КУДА надо залить изменения, {branch}-ОТКУДА 
git reset --hard {commit} откат до нужного коммита, вся история до него будет не видна
 Если клонирум репо где main/master пустые, но есть ветки, то командой git checkout {name} можно перейти на нее и все с ветки появится.
 Если разная история коммитов, то смержить не получится.
 Если после привязки удаленного репо с локальным не сделать git pull origin master/main, то потом не получится пулл реквест на github. 
git revert {commit-его хэш сумма} удаляет/добавляет коммит и все его изменения
git rebase -i HEAD~{число комитов сверху(от хэда) для отката}. Входим в интерактивный режим. Кнопка Insert. Выбираем команды и вверху их пишем.
  в нашем случае для удаления команда drop. Для пуша git push -f(git push --force) -что бы прошла новая история коммитов
git push -f - после изменения коммитов
git commit --amend -m {commit} или git commit -a -m {commit} сохраняет коммит поверх последнего
git commit --amend --no-edit меняем внутри файла, но название коммита не меняется
git cherry-pick {commit-его хэш сумма} добавляем через  нужный коммит какую-либо инфу с другой ветки. Может потребоватья мерж и удаление конфликта.(Создает новый коммит в текущей ветке, содержащий изменения из указанного коммита)

master принадлежит локальному репозиторию, а origin/master - удаленному
Как исправить ошибку "fatal: The current branch my-branch has no upstream branch", возникающую при использовании git push и настроить локальную ветку на слежение за удалённой веткой так,
чтобы впоследствии при использовании git push данная ошибка не возникала ---- git push -u origin my-branch

ОСНОВЫ ОСНОВ:
git init  создается новый локальный репозиторий
git clone {link}  создается копия удаленного репозитория
git remote -v  выводятся ссылки на текущий удаленный репозиторий с указанием протокола
git log  выводится история коммитов текущей ветки
git status  показывает состояние файлов в рабочей директории и staging area, какие файлы изменены, но не добавлены в staging area
git diff  выводит измененные и не внесенные в коммит строки в файлах по сравнению с последним коммитом в текущей ветке
git show  выводит изменения, внесенные отдельным коммитом
git branch  Создает новую ветку с именем, которое указано в качестве аргумента и Выводит список веток текущего репозитория
git checkout  предназначена для перехода между ветками или перемещения указателя на другой существующий коммит
git reset --soft {commit} или git reset можно переместиться текущим указателем на указанный коммит, при этом не изменяя файлов в рабочей директории
git commit по умолчанию сохраняет изменения, внесенные в staging area, в локальный репозиторий
git commit -am cохраняет все изменения, как внесенные, так и не внесенные в staging area, для всех tracked файлов в локальный репозиторий
git rm удаляет файлы с изменениями из рабочей директории и из индекса
git fetch данные из удаленного репозитория попадут в локальный без изменения текущего состояния локальной ветки
git pull данные из удаленного репозитория попадут в локальный, обновляя данные текущей локальной ветки
git merge слияние истории коммитов из указанной ветки в текущую по дате коммита с добавлением merge commit (на локальном репо)
git rebase ( если без возникновения конфликтов)  перезапись истории текущей ветки путем пересоздания коммитов, которая будет начинаться с конца указанной ветки



